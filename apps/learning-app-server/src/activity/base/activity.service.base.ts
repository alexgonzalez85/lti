/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Activity as PrismaActivity,
  Score as PrismaScore,
  Teacher as PrismaTeacher,
} from "@prisma/client";

import { ActivityDto } from "../ActivityDto";

export class ActivityServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ActivityCountArgs, "select">): Promise<number> {
    return this.prisma.activity.count(args);
  }

  async activities(
    args: Prisma.ActivityFindManyArgs
  ): Promise<PrismaActivity[]> {
    return this.prisma.activity.findMany(args);
  }
  async activity(
    args: Prisma.ActivityFindUniqueArgs
  ): Promise<PrismaActivity | null> {
    return this.prisma.activity.findUnique(args);
  }
  async createActivity(
    args: Prisma.ActivityCreateArgs
  ): Promise<PrismaActivity> {
    return this.prisma.activity.create(args);
  }
  async updateActivity(
    args: Prisma.ActivityUpdateArgs
  ): Promise<PrismaActivity> {
    return this.prisma.activity.update(args);
  }
  async deleteActivity(
    args: Prisma.ActivityDeleteArgs
  ): Promise<PrismaActivity> {
    return this.prisma.activity.delete(args);
  }

  async findScores(
    parentId: string,
    args: Prisma.ScoreFindManyArgs
  ): Promise<PrismaScore[]> {
    return this.prisma.activity
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .scores(args);
  }

  async getTeacher(parentId: string): Promise<PrismaTeacher | null> {
    return this.prisma.activity
      .findUnique({
        where: { id: parentId },
      })
      .teacher();
  }
  async AssignActivity(args: ActivityDto): Promise<ActivityDto> {
    throw new Error("Not implemented");
  }
  async GetActivities(args: ActivityDto): Promise<ActivityDto[]> {
    throw new Error("Not implemented");
  }
}
