/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ActivityTemplate } from "./ActivityTemplate";
import { ActivityTemplateCountArgs } from "./ActivityTemplateCountArgs";
import { ActivityTemplateFindManyArgs } from "./ActivityTemplateFindManyArgs";
import { ActivityTemplateFindUniqueArgs } from "./ActivityTemplateFindUniqueArgs";
import { CreateActivityTemplateArgs } from "./CreateActivityTemplateArgs";
import { UpdateActivityTemplateArgs } from "./UpdateActivityTemplateArgs";
import { DeleteActivityTemplateArgs } from "./DeleteActivityTemplateArgs";
import { ActivityTemplateDto } from "../ActivityTemplateDto";
import { ActivityTemplateService } from "../activityTemplate.service";
@graphql.Resolver(() => ActivityTemplate)
export class ActivityTemplateResolverBase {
  constructor(protected readonly service: ActivityTemplateService) {}

  async _activityTemplatesMeta(
    @graphql.Args() args: ActivityTemplateCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ActivityTemplate])
  async activityTemplates(
    @graphql.Args() args: ActivityTemplateFindManyArgs
  ): Promise<ActivityTemplate[]> {
    return this.service.activityTemplates(args);
  }

  @graphql.Query(() => ActivityTemplate, { nullable: true })
  async activityTemplate(
    @graphql.Args() args: ActivityTemplateFindUniqueArgs
  ): Promise<ActivityTemplate | null> {
    const result = await this.service.activityTemplate(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ActivityTemplate)
  async createActivityTemplate(
    @graphql.Args() args: CreateActivityTemplateArgs
  ): Promise<ActivityTemplate> {
    return await this.service.createActivityTemplate({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ActivityTemplate)
  async updateActivityTemplate(
    @graphql.Args() args: UpdateActivityTemplateArgs
  ): Promise<ActivityTemplate | null> {
    try {
      return await this.service.updateActivityTemplate({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ActivityTemplate)
  async deleteActivityTemplate(
    @graphql.Args() args: DeleteActivityTemplateArgs
  ): Promise<ActivityTemplate | null> {
    try {
      return await this.service.deleteActivityTemplate(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ActivityTemplateDto)
  async CreateActivityTemplate(
    @graphql.Args()
    args: ActivityTemplateDto
  ): Promise<ActivityTemplateDto> {
    return this.service.CreateActivityTemplate(args);
  }
}
