/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ActivityTemplateService } from "../activityTemplate.service";
import { ActivityTemplateCreateInput } from "./ActivityTemplateCreateInput";
import { ActivityTemplate } from "./ActivityTemplate";
import { ActivityTemplateFindManyArgs } from "./ActivityTemplateFindManyArgs";
import { ActivityTemplateWhereUniqueInput } from "./ActivityTemplateWhereUniqueInput";
import { ActivityTemplateUpdateInput } from "./ActivityTemplateUpdateInput";
import { ActivityTemplateDto } from "../ActivityTemplateDto";

export class ActivityTemplateControllerBase {
  constructor(protected readonly service: ActivityTemplateService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ActivityTemplate })
  async createActivityTemplate(
    @common.Body() data: ActivityTemplateCreateInput
  ): Promise<ActivityTemplate> {
    return await this.service.createActivityTemplate({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        templateContent: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ActivityTemplate] })
  @ApiNestedQuery(ActivityTemplateFindManyArgs)
  async activityTemplates(
    @common.Req() request: Request
  ): Promise<ActivityTemplate[]> {
    const args = plainToClass(ActivityTemplateFindManyArgs, request.query);
    return this.service.activityTemplates({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        templateContent: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ActivityTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async activityTemplate(
    @common.Param() params: ActivityTemplateWhereUniqueInput
  ): Promise<ActivityTemplate | null> {
    const result = await this.service.activityTemplate({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        templateContent: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ActivityTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateActivityTemplate(
    @common.Param() params: ActivityTemplateWhereUniqueInput,
    @common.Body() data: ActivityTemplateUpdateInput
  ): Promise<ActivityTemplate | null> {
    try {
      return await this.service.updateActivityTemplate({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          templateContent: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ActivityTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteActivityTemplate(
    @common.Param() params: ActivityTemplateWhereUniqueInput
  ): Promise<ActivityTemplate | null> {
    try {
      return await this.service.deleteActivityTemplate({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          templateContent: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Post("/activity-template")
  @swagger.ApiOkResponse({
    type: ActivityTemplateDto,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async CreateActivityTemplate(
    @common.Body()
    body: ActivityTemplateDto
  ): Promise<ActivityTemplateDto> {
    return this.service.CreateActivityTemplate(body);
  }
}
