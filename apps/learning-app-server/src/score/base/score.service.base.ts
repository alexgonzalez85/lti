/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Score as PrismaScore,
  Activity as PrismaActivity,
  Student as PrismaStudent,
} from "@prisma/client";

import { ScoreDto } from "../ScoreDto";

export class ScoreServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ScoreCountArgs, "select">): Promise<number> {
    return this.prisma.score.count(args);
  }

  async scores(args: Prisma.ScoreFindManyArgs): Promise<PrismaScore[]> {
    return this.prisma.score.findMany(args);
  }
  async score(args: Prisma.ScoreFindUniqueArgs): Promise<PrismaScore | null> {
    return this.prisma.score.findUnique(args);
  }
  async createScore(args: Prisma.ScoreCreateArgs): Promise<PrismaScore> {
    return this.prisma.score.create(args);
  }
  async updateScore(args: Prisma.ScoreUpdateArgs): Promise<PrismaScore> {
    return this.prisma.score.update(args);
  }
  async deleteScore(args: Prisma.ScoreDeleteArgs): Promise<PrismaScore> {
    return this.prisma.score.delete(args);
  }

  async getActivity(parentId: string): Promise<PrismaActivity | null> {
    return this.prisma.score
      .findUnique({
        where: { id: parentId },
      })
      .activity();
  }

  async getStudent(parentId: string): Promise<PrismaStudent | null> {
    return this.prisma.score
      .findUnique({
        where: { id: parentId },
      })
      .student();
  }
  async GetScores(args: ScoreDto): Promise<ScoreDto[]> {
    throw new Error("Not implemented");
  }
  async RecordScore(args: ScoreDto): Promise<ScoreDto> {
    throw new Error("Not implemented");
  }
}
